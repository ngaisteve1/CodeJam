<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #><#
	var types =
		new[]
		{
			new {Lang = "byte",    Clr = "Byte",    Style = "Integer"},
			new {Lang = "sbyte",   Clr = "SByte",   Style = "Integer"},
			new {Lang = "short",   Clr = "Int16",   Style = "Number"},
			new {Lang = "ushort",  Clr = "UInt16",  Style = "Integer"},
			new {Lang = "int",     Clr = "Int32",   Style = "Integer"},
			new {Lang = "uint",    Clr = "UInt32",  Style = "Integer"},
			new {Lang = "long",    Clr = "Int64",   Style = "Integer"},
			new {Lang = "ulong",   Clr = "UInt64",  Style = "Integer"},
			new {Lang = "float",   Clr = "Single",  Style = "Float"},
			new {Lang = "double",  Clr = "Double",  Style = "Float"},
			new {Lang = "decimal", Clr = "Decimal", Style = "Number"}
		};
#>
using System;
using System.Globalization;

using JetBrains.Annotations;

namespace CodeJam.Strings
{
	partial class StringExtensions
	{
<#for (int i = 0; i < types.Length; i++)
{
	var type = types[i];
	WriteRegionLine(type.Lang);#>
		/// <summary>
		/// Converts the string representation of a number in a specified style and culture-specific format to its
		/// <see cref="<#=type.Clr#>"/> equivalent. A return value indicates whether the conversion succeeded.
		/// </summary>
		/// <param name="str">
		/// A string containing a number to convert. The string is interpreted using the style specified by
		/// <paramref name="numberStyle"/>.
		/// </param>
		/// <param name="numberStyle">
		/// A bitwise combination of enumeration values that indicates the style elements that can be present in
		/// <paramref name="str"/>. Default value is <#=type.Style#>.
		/// </param>
		/// <param name="provider">
		/// An object that supplies culture-specific formatting information about <paramref name="str"/>.
		/// </param>
		/// <returns>
		/// When this method returns, contains the <see cref="<#=type.Clr#>"/> value equivalent of the number contained in
		/// <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
		/// the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
		/// represents a number less than <see cref="<#=type.Clr#>.MinValue"/> or greater than <see cref="<#=type.Clr#>.MaxValue"/>.
		/// </returns>
		[Pure]
		public static <#=type.Lang#>? To<#=type.Clr#>(
			[CanBeNull] this string? str,
			NumberStyles numberStyle = NumberStyles.<#=type.Style#>,
			[CanBeNull] IFormatProvider? provider = null)
		{
			<#=type.Lang#> result;
			return <#=type.Lang#>.TryParse(str, numberStyle, provider, out result) ? (<#=type.Lang#>?)result : null;
		}

		/// <summary>
		/// Converts the string representation of a number in a specified style and culture-invariant format to its
		/// <see cref="<#=type.Clr#>"/> equivalent. A return value indicates whether the conversion succeeded.
		/// </summary>
		/// <param name="str">
		/// A string containing a number to convert. The string is interpreted using the style specified by
		/// <paramref name="numberStyle"/>.
		/// </param>
		/// <param name="numberStyle">
		/// A bitwise combination of enumeration values that indicates the style elements that can be present in
		/// <paramref name="str"/>. Default value is <#=type.Style#>.
		/// </param>
		/// <returns>
		/// When this method returns, contains the <see cref="<#=type.Clr#>"/> value equivalent of the number contained in
		/// <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
		/// the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
		/// represents a number less than <see cref="<#=type.Clr#>.MinValue"/> or greater than <see cref="<#=type.Clr#>.MaxValue"/>.
		/// </returns>
		[Pure]
		public static <#=type.Lang#>? To<#=type.Clr#>Invariant(
			[CanBeNull] this string? str,
			NumberStyles numberStyle = NumberStyles.<#=type.Style#>)
		{
			<#=type.Lang#> result;
			return <#=type.Lang#>.TryParse(str, numberStyle, CultureInfo.InvariantCulture, out result) ? (<#=type.Lang#>?)result : null;
		}
<#
}
FlushRegions();#>
	}
}