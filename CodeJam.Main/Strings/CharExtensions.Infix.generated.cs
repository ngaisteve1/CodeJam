//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using JetBrains.Annotations;

namespace CodeJam.Strings
{
	partial class CharExtensions
	{
		/// <summary>
		/// Indicates whether a Unicode character is categorized as a control.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a control; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsControl(this char chr) => char.IsControl(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a highsurrogate.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a highsurrogate; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsHighSurrogate(this char chr) => char.IsHighSurrogate(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a lowsurrogate.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a lowsurrogate; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsLowSurrogate(this char chr) => char.IsLowSurrogate(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a digit.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a digit; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsDigit(this char chr) => char.IsDigit(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a letter.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a letter; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsLetter(this char chr) => char.IsLetter(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a letterordigit.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a letterordigit; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsLetterOrDigit(this char chr) => char.IsLetterOrDigit(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a lower.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a lower; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsLower(this char chr) => char.IsLower(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a upper.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a upper; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsUpper(this char chr) => char.IsUpper(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a number.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a number; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsNumber(this char chr) => char.IsNumber(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a punctuation.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a punctuation; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsPunctuation(this char chr) => char.IsPunctuation(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a separator.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a separator; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsSeparator(this char chr) => char.IsSeparator(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a surrogate.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a surrogate; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsSurrogate(this char chr) => char.IsSurrogate(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a symbol.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a symbol; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsSymbol(this char chr) => char.IsSymbol(chr);

		/// <summary>
		/// Indicates whether a Unicode character is categorized as a whitespace.
		/// </summary>
		/// <param name="chr">The Unicode character to evaluate.</param>
		/// <returns><c>true</c> if <paramref name="chr"/> is a whitespace; otherwise, <c>false</c>.</returns>
		[Pure]
		public static bool IsWhiteSpace(this char chr) => char.IsWhiteSpace(chr);

	}
}
