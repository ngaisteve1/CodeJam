//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;

using NUnit.Framework;

using IntOp = CodeJam.Arithmetic.Operators<int>;
using NullableDoubleOp = CodeJam.Arithmetic.Operators<double?>;
using EnumOp = CodeJam.Arithmetic.Operators<System.AttributeTargets>;
using NullableEnumOp = CodeJam.Arithmetic.Operators<System.AttributeTargets?>;

namespace CodeJam.Arithmetic
{
	partial class OperatorsTests
	{
		private static AttributeTargets? NullableEnumA = AttributeTargets.Method;
		private static AttributeTargets? NullableEnumB = AttributeTargets.Class;
		private static AttributeTargets? NullableEnumC = null;

		#region Unary
		#region UnaryMinus
		[Test]
		public void TestIntUnaryMinus() => Assert.AreEqual(-42, IntOp.UnaryMinus(42));

		[Test]
		public void TestNullableDoubleUnaryMinus() => Assert.AreEqual(-42f, NullableDoubleOp.UnaryMinus(42f));
		#endregion

		#region OnesComplement
		[Test]
		public void TestIntOnesComplement() => Assert.AreEqual(~42, IntOp.OnesComplement(42));

		[Test]
		public void TestEnumOnesComplement() =>
			Assert.AreEqual(~NullableEnumA.Value, EnumOp.OnesComplement(NullableEnumA.Value));

		[Test]
		public void TestNullableEnumOnesComplement()
		{
			Assert.AreEqual(~NullableEnumA, NullableEnumOp.OnesComplement(NullableEnumA));
			Assert.AreEqual(~NullableEnumC, NullableEnumOp.OnesComplement(NullableEnumC));
		}
		#endregion
		#endregion

		#region Comparison
		#region AreEqual
		[Test]
		public void TestIntAreEqual() => Assert.AreEqual(1 == 2, IntOp.AreEqual(1, 2));

		[Test]
		public void TestEnumAreEqual() =>
			Assert.AreEqual(
				NullableEnumA.Value == NullableEnumB.Value,
				EnumOp.AreEqual(NullableEnumA.Value, NullableEnumB.Value));

		[Test]
		public void TestNullableEnumAreEqual()
		{
			Assert.AreEqual(NullableEnumA == NullableEnumB, NullableEnumOp.AreEqual(NullableEnumA, NullableEnumB));
			Assert.AreEqual(NullableEnumA == NullableEnumC, NullableEnumOp.AreEqual(NullableEnumA, NullableEnumC));
		}

		[Test]
		public void TestNullableDoubleAreEqual() => Assert.AreEqual(1f == 2f, NullableDoubleOp.AreEqual(1, 2));
		#endregion

		#region AreNotEqual
		[Test]
		public void TestIntAreNotEqual() => Assert.AreEqual(1 != 2, IntOp.AreNotEqual(1, 2));

		[Test]
		public void TestEnumAreNotEqual() =>
			Assert.AreEqual(
				NullableEnumA.Value != NullableEnumB.Value,
				EnumOp.AreNotEqual(NullableEnumA.Value, NullableEnumB.Value));

		[Test]
		public void TestNullableEnumAreNotEqual()
		{
			Assert.AreEqual(NullableEnumA != NullableEnumB, NullableEnumOp.AreNotEqual(NullableEnumA, NullableEnumB));
			Assert.AreEqual(NullableEnumA != NullableEnumC, NullableEnumOp.AreNotEqual(NullableEnumA, NullableEnumC));
		}

		[Test]
		public void TestNullableDoubleAreNotEqual() => Assert.AreEqual(1f != 2f, NullableDoubleOp.AreNotEqual(1, 2));
		#endregion

		#region GreaterThan
		[Test]
		public void TestIntGreaterThan() => Assert.AreEqual(1 > 2, IntOp.GreaterThan(1, 2));

		[Test]
		public void TestNullableDoubleGreaterThan() => Assert.AreEqual(1f > 2f, NullableDoubleOp.GreaterThan(1, 2));
		#endregion

		#region GreaterThanOrEqual
		[Test]
		public void TestIntGreaterThanOrEqual() => Assert.AreEqual(1 >= 2, IntOp.GreaterThanOrEqual(1, 2));

		[Test]
		public void TestNullableDoubleGreaterThanOrEqual() => Assert.AreEqual(1f >= 2f, NullableDoubleOp.GreaterThanOrEqual(1, 2));
		#endregion

		#region LessThan
		[Test]
		public void TestIntLessThan() => Assert.AreEqual(1 < 2, IntOp.LessThan(1, 2));

		[Test]
		public void TestNullableDoubleLessThan() => Assert.AreEqual(1f < 2f, NullableDoubleOp.LessThan(1, 2));
		#endregion

		#region LessThanOrEqual
		[Test]
		public void TestIntLessThanOrEqual() => Assert.AreEqual(1 <= 2, IntOp.LessThanOrEqual(1, 2));

		[Test]
		public void TestNullableDoubleLessThanOrEqual() => Assert.AreEqual(1f <= 2f, NullableDoubleOp.LessThanOrEqual(1, 2));
		#endregion
		#endregion

		#region Binary
		#region Plus
		[Test]
		public void TestIntPlus() => Assert.AreEqual(1 + 2, IntOp.Plus(1, 2));

		[Test]
		public void TestNullableDoublePlus() => Assert.AreEqual(1f + 2f, NullableDoubleOp.Plus(1, 2));
		#endregion

		#region Minus
		[Test]
		public void TestIntMinus() => Assert.AreEqual(1 - 2, IntOp.Minus(1, 2));

		[Test]
		public void TestNullableDoubleMinus() => Assert.AreEqual(1f - 2f, NullableDoubleOp.Minus(1, 2));
		#endregion

		#region Mul
		[Test]
		public void TestIntMul() => Assert.AreEqual(1 * 2, IntOp.Mul(1, 2));

		[Test]
		public void TestNullableDoubleMul() => Assert.AreEqual(1f * 2f, NullableDoubleOp.Mul(1, 2));
		#endregion

		#region Div
		[Test]
		public void TestIntDiv() => Assert.AreEqual(1 / 2, IntOp.Div(1, 2));

		[Test]
		public void TestNullableDoubleDiv() => Assert.AreEqual(1f / 2f, NullableDoubleOp.Div(1, 2));
		#endregion

		#region Modulo
		[Test]
		public void TestIntModulo() => Assert.AreEqual(1 % 2, IntOp.Modulo(1, 2));
		#endregion

		#region Xor
		[Test]
		public void TestIntXor() => Assert.AreEqual(1 ^ 2, IntOp.Xor(1, 2));

		[Test]
		public void TestEnumXor() =>
			Assert.AreEqual(
				NullableEnumA.Value ^ NullableEnumB.Value,
				EnumOp.Xor(NullableEnumA.Value, NullableEnumB.Value));

		[Test]
		public void TestNullableEnumXor()
		{
			Assert.AreEqual(NullableEnumA ^ NullableEnumB, NullableEnumOp.Xor(NullableEnumA, NullableEnumB));
			Assert.AreEqual(NullableEnumA ^ NullableEnumC, NullableEnumOp.Xor(NullableEnumA, NullableEnumC));
		}
		#endregion

		#region BitwiseAnd
		[Test]
		public void TestIntBitwiseAnd() => Assert.AreEqual(1 & 2, IntOp.BitwiseAnd(1, 2));

		[Test]
		public void TestEnumBitwiseAnd() =>
			Assert.AreEqual(
				NullableEnumA.Value & NullableEnumB.Value,
				EnumOp.BitwiseAnd(NullableEnumA.Value, NullableEnumB.Value));

		[Test]
		public void TestNullableEnumBitwiseAnd()
		{
			Assert.AreEqual(NullableEnumA & NullableEnumB, NullableEnumOp.BitwiseAnd(NullableEnumA, NullableEnumB));
			Assert.AreEqual(NullableEnumA & NullableEnumC, NullableEnumOp.BitwiseAnd(NullableEnumA, NullableEnumC));
		}
		#endregion

		#region BitwiseOr
		[Test]
		public void TestIntBitwiseOr() => Assert.AreEqual(1 | 2, IntOp.BitwiseOr(1, 2));

		[Test]
		public void TestEnumBitwiseOr() =>
			Assert.AreEqual(
				NullableEnumA.Value | NullableEnumB.Value,
				EnumOp.BitwiseOr(NullableEnumA.Value, NullableEnumB.Value));

		[Test]
		public void TestNullableEnumBitwiseOr()
		{
			Assert.AreEqual(NullableEnumA | NullableEnumB, NullableEnumOp.BitwiseOr(NullableEnumA, NullableEnumB));
			Assert.AreEqual(NullableEnumA | NullableEnumC, NullableEnumOp.BitwiseOr(NullableEnumA, NullableEnumC));
		}
		#endregion

		#region LeftShift
		[Test]
		public void TestIntLeftShift() => Assert.AreEqual(1 << 2, IntOp.LeftShift(1, 2));
		#endregion

		#region RightShift
		[Test]
		public void TestIntRightShift() => Assert.AreEqual(1 >> 2, IntOp.RightShift(1, 2));
		#endregion
		#endregion
	}
}